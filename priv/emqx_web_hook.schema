%%-*- mode: erlang -*-
%% EMQ X R3.0 config mapping

{mapping, "web.hook.api.url", "emqx_web_hook.url", [
  {datatype, string}
]}.

{mapping, "web.hook.ssl.cafile", "emqx_web_hook.pool_opts", [
  {datatype, string}
]}.

{mapping, "web.hook.ssl.certfile", "emqx_web_hook.pool_opts", [
  {datatype, string}
]}.

{mapping, "web.hook.ssl.keyfile", "emqx_web_hook.pool_opts", [
  {datatype, string}
]}.

{mapping, "web.hook.request.timeout", "emqx_web_hook.request_timeout", [
  {default, "5s"},
  {datatype, [integer, {duration, ms}]}
]}.

{mapping, "web.hook.pool_size", "emqx_web_hook.pool_opts", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "web.hook.request.connect_timeout", "emqx_web_hook.pool_opts", [
  {default, "5s"},
  {datatype, [integer, {duration, ms}]}
]}.

{mapping, "web.hook.request.retry_times", "emqx_web_hook.pool_opts", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "web.hook.request.retry_interval", "emqx_web_hook.pool_opts", [
  {default, "1s"},
  {datatype, {duration, ms}}
]}.

{mapping, "web.hook.encode_payload", "emqx_web_hook.encode_payload", [
  {default, undefined},
  {datatype, {enum, [base62, base64]}}
]}.

{mapping, "web.hook.rule.client.connect.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.client.connack.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.client.connected.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.client.disconnected.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.client.subscribe.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.client.unsubscribe.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.session.subscribed.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.session.unsubscribed.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.session.terminated.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.message.publish.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.message.acked.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.rule.message.delivered.$name", "emqx_web_hook.rules", [
  {datatype, string}
]}.

{mapping, "web.hook.headers.$name", "emqx_web_hook.headers", [
  {datatype, string}
]}.

{translation, "emqx_web_hook.headers", fun(Conf) ->
  Headers = cuttlefish_variable:filter_by_prefix("web.hook.headers", Conf),
  [{K, V} || {[_, _, _, K], V} <- Headers]
end}.

{translation, "emqx_web_hook.rules", fun(Conf) ->
  Hooks = cuttlefish_variable:filter_by_prefix("web.hook.rule", Conf),
  lists:map(
    fun({[_, _, _,Name1,Name2, _], Val}) -> 
	  {lists:concat([Name1,".",Name2]), Val}
	end, Hooks)
end}.

{translation, "emqx_web_hook.pool_opts", fun(Conf) ->
  Filter = fun(L) -> [{K, V} || {K, V} <- L, V =/= undefined] end,
  InfinityFun = fun(0) -> infinity;
                   (Duration) -> Duration
                end,
  SslOpts = Filter([{cacertfile, cuttlefish:conf_get("web.hook.ssl.cacertfile", Conf, undefined)},
                    {certfile, cuttlefish:conf_get("web.hook.ssl.certfile", Conf, undefined)},
                    {keyfile, cuttlefish:conf_get("web.hook.ssl.keyfile", Conf, undefined)}]),
  Opts = [{pool_size, cuttlefish:conf_get("web.hook.pool_size", Conf)},
          {connect_timeout, InfinityFun(cuttlefish:conf_get("web.hook.request.connect_timeout", Conf))},
          {retry, cuttlefish:conf_get("web.hook.request.retry_times", Conf)},
          {retry_timeout, cuttlefish:conf_get("web.hook.request.retry_interval", Conf)}],
  case SslOpts of
      [] -> Filter(Opts);
      _  ->
          TlsVers = ['tlsv1.2','tlsv1.1',tlsv1],
          DefaultOpts = [{versions, TlsVers},
                         {ciphers, lists:foldl(
                                       fun(TlsVer, Ciphers) ->
                                           Ciphers ++ ssl:cipher_suites(all, TlsVer)
                                       end, [], TlsVers)}],
          Filter([{ssl, DefaultOpts ++ SslOpts} | Opts])
  end
end}.
